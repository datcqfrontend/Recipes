{ 
	"content":[
		{ 	"type": "subheader", 
			"title": "Function: ",
			"shortContent": ""
		},

		{ 
			"title": "angular.lowercase",
			"shortContent": "Converts the specified string to lowercase.",
			"keyword": "",
			"link": "#angularAPI/function/lowercase"
		},
		{ 
			"title": "angular.uppercase",
			"shortContent": "Converts the specified string to uppercase.",
			"keyword": "",
			"link": "#angularAPI/function/uppercase"
		},
		{ 
			"title": "angular.forEach",
			"shortContent": "Invokes the iterator function once for each item in obj collection, which can be either an object or an array.<br>The iterator function is invoked with iterator(value, key, obj), where value is the value of an object property or an array element, key is the object property key or array element index and obj is the obj itself.<br>Specifying a context for the function is optional.",
			"keyword": "",
			"link": "#angularAPI/function/forEach"
		},
		{ 	"type": "clearfix"	},


		{ 
			"title": "angular.extend",
			"shortContent": "Extends the destination object dst by copying own enumerable properties from the src object(s) to dst.<br>You can specify multiple src objects. If you want to preserve original objects, you can do so by passing an empty object as the target: <br><spanRed>var object = angular.extend({}, object1, object2).</spanRed>",
			"keyword": "",
			"link": "#angularAPI/function/lowercase"
		},
		{ 
			"title": "angular.merge",
			"shortContent": "Deeply extends the destination object dst by copying own enumerable properties from the src object(s) to dst.<br>You can specify multiple src objects. If you want to preserve original objects, you can do so by passing an empty object as the target: <br><spanRed>var object = angular.merge({}, object1, object2).</spanRed>",
			"keyword": "",
			"link": "#angularAPI/function/uppercase"
		},
		{ 
			"title": "angular.noop",
			"shortContent": "A function that performs no operations. This function can be useful when writing code in the functional style.<codeBody>function foo(callback) {<br>&nbsp;&nbsp;&nbsp;  var result = calculateResult();<br>&nbsp;&nbsp;&nbsp;  (callback || angular.noop)(result);<br>}</codeBody>",
			"keyword": "",
			"link": "#angularAPI/function/forEach"
		},
		{ 	"type": "clearfix"	},	

		{ 
			"title": "angular.identity",
			"shortContent": "A function that returns its first argument. This function is useful when writing code in the functional style.",
			"keyword": "",
			"link": "#angularAPI/function/identity"
		},
		{ 
			"title": "angular.isUndefined",
			"shortContent": "Determines if a reference is undefined.",
			"keyword": "",
			"link": "#angularAPI/function/isUndefined"
		},
		{ 
			"title": "angular.isDefined",
			"shortContent": "Determines if a reference is defined.",
			"keyword": "",
			"link": "#angularAPI/function/isDefined"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "angular.isObject",
			"shortContent": "Determines if a reference is an Object. Unlike typeof in JavaScript, nulls are not considered to be objects. Note that JavaScript arrays are objects.",
			"keyword": "",
			"link": "#angularAPI/function/isObject"
		},
		{ 
			"title": "angular.isString",
			"shortContent": "Determines if a reference is a String.",
			"keyword": "",
			"link": "#angularAPI/function/isString"
		},
		{ 
			"title": "angular.isNumber",
			"shortContent": "Determines if a reference is a Number.",
			"keyword": "",
			"link": "#angularAPI/function/isNumber"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "angular.isDate",
			"shortContent": "Determines if a value is a date.",
			"keyword": "",
			"link": "#angularAPI/function/isDate"
		},
		{ 
			"title": "angular.isArray",
			"shortContent": "Determines if a reference is an Array.",
			"keyword": "",
			"link": "#angularAPI/function/isArray"
		},
		{ 
			"title": "angular.isFunction",
			"shortContent": "Determines if a reference is a Function.",
			"keyword": "",
			"link": "#angularAPI/function/isFunction"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "angular.isElement",
			"shortContent": "Determines if a reference is a DOM element (or wrapped jQuery element).",
			"keyword": "",
			"link": "#angularAPI/function/isElement"
		},
		{ 
			"title": "angular.copy",
			"shortContent": "Creates a deep copy of source, which should be an object or an array.",
			"keyword": "",
			"link": "#angularAPI/function/copy"
		},
		{ 
			"title": "angular.equals",
			"shortContent": "Determines if two objects or two values are equivalent. Supports value types, regular expressions, arrays and objects.",
			"keyword": "",
			"link": "#angularAPI/function/equals"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "angular.bind",
			"shortContent": "Returns a function which calls function fn bound to self (self becomes the this for fn). You can supply optional args that are prebound to the function. This feature is also known as partial application, as distinguished from function currying.",
			"keyword": "",
			"link": "#angularAPI/function/bind"
		},
		{ 
			"title": "angular.toJson",
			"shortContent": "Serializes input into a JSON-formatted string. Properties with leading $$ characters will be stripped since angular uses this notation internally.",
			"keyword": "",
			"link": "#angularAPI/function/toJson"
		},
		{ 
			"title": "angular.fromJson",
			"shortContent": "Deserializes a JSON string.",
			"keyword": "",
			"link": "#angularAPI/function/fromJson"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "angular.bootstrap",
			"shortContent": "Use this function to manually start up angular application.",
			"keyword": "",
			"link": "#angularAPI/function/bootstrap"
		},
		{ 
			"title": "angular.reloadWithDebugInfo",
			"shortContent": "Use this function to reload the current application with debug information turned on. This takes precedence over a call to <spanRed>$compileProvider.debugInfoEnabled(false)</spanRed>.",
			"keyword": "",
			"link": "#angularAPI/function/reloadWithDebugInfo"
		},
		{ 
			"title": "angular.injector",
			"shortContent": "Creates an injector object that can be used for retrieving services as well as for dependency injection (see dependency injection).",
			"keyword": "",
			"link": "#angularAPI/function/injector"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "angular.element",
			"shortContent": "Wraps a raw DOM element or HTML string as a jQuery element.",
			"keyword": "",
			"link": "#angularAPI/function/element"
		},
		{ 
			"title": "angular.module",
			"shortContent": "The angular.module is a global place for creating, registering and retrieving Angular modules. All modules (angular core or 3rd party) that should be available to an application must be registered using this mechanism.",
			"keyword": "",
			"link": "#angularAPI/function/module"
		},
				
		{ 	"type": "clearfix"	}

		
	]
}