{ 
	"content":[
		{ 	"type": "subheader", 
			"title": "Directive: ",
			"shortContent": ""
		},

		{ 
			"title": "ngJq",
			"shortContent": "Use this directive to force the angular.element library. This should be used to force either jqLite by leaving ng-jq blank or setting the name of the jquery variable under window (eg. jQuery).",
			"keyword": "",
			"link": "#angularAPI/directive/ngJq"
		},
		{ 
			"title": "ngApp",
			"shortContent": "Use this directive to <strong>auto-bootstrap</strong> an AngularJS application. The <code><span class='pln'>ngApp</span></code> directive designates the <strong>root element</strong> of the application and is typically placed near the root element of the page - e.g. on the <code><span class='tag'>&lt;body&gt;</span></code> or <code><span class='tag'>&lt;html&gt;</span></code> tags.",
			"keyword": "",
			"link": "#angularAPI/directive/ngApp"
		},
		{ 
			"title": "a",
			"shortContent": "Modifies the default behavior of the html A tag so that the default action is prevented when the href attribute is empty.",
			"keyword": "",
			"link": "#angularAPI/directive/a"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngHref",
			"shortContent": "Using Angular markup like <code><span class='pun'>{{</span><span class='pln'>hash</span><span class='pun'>}}</span></code> in an href attribute will make the link go to the wrong URL if the user clicks it before Angular has a chance to replace the <code><span class='pun'>{{</span><span class='pln'>hash</span><span class='pun'>}}</span></code> markup with its value. Until Angular replaces the markup the link will be broken and will most likely return a 404 error. The <code><span class='pln'>ngHref</span></code> directive solves this problem.",
			"keyword": "",
			"link": "#angularAPI/directive/ngHref"
		},
		{ 
			"title": "ngSrc",
			"shortContent": "Using Angular markup like <code><span class='pun'>{{</span><span class='pln'>hash</span><span class='pun'>}}</span></code> in a <code><span class='pln'>src</span></code> attribute doesn't work right: The browser will fetch from the URL with the literal text <code><span class='pun'>{{</span><span class='pln'>hash</span><span class='pun'>}}</span></code> until Angular replaces the expression inside <code><span class='pun'>{{</span><span class='pln'>hash</span><span class='pun'>}}</span></code>. The <code><span class='pln'>ngSrc</span></code> directive solves this problem.",
			"keyword": "",
			"link": "#angularAPI/directive/ngSrc"
		},
		{ 
			"title": "ngSrcset",
			"shortContent": "Using Angular markup like <code><span class='pun'>{{</span><span class='pln'>hash</span><span class='pun'>}}</span></code> in a <code><span class='pln'>srcset</span></code> attribute doesn't work right: The browser will fetch from the URL with the literal text <code><span class='pun'>{{</span><span class='pln'>hash</span><span class='pun'>}}</span></code> until Angular replaces the expression inside <code><span class='pun'>{{</span><span class='pln'>hash</span><span class='pun'>}}</span></code>. The <code><span class='pln'>ngSrcset</span></code> directive solves this problem.",
			"keyword": "",
			"link": "#angularAPI/directive/ngSrcset"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngDisabled",
			"shortContent": "This directive sets the <code><span class='pln'>disabled</span></code> attribute on the element if the <a href='guide/expression'>expression</a> inside <code><span class='pln'>ngDisabled</span></code> evaluates to truthy.",
			"keyword": "",
			"link": "#angularAPI/directive/ngDisabled"
		},
		{ 
			"title": "ngChecked",
			"shortContent": "Sets the <code><span class='kwd'>checked</span></code> attribute on the element, if the expression inside <code><span class='pln'>ngChecked</span></code> is truthy.",
			"keyword": "",
			"link": "#angularAPI/directive/ngChecked"
		},
		{ 
			"title": "ngReadonly",
			"shortContent": "The HTML specification does not require browsers to preserve the values of boolean attributes such as readonly. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code><span class='pln'>ngReadonly</span></code> directive solves this problem for the <code><span class='kwd'>readonly</span></code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.",
			"keyword": "",
			"link": "#angularAPI/directive/ngReadonly"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngSelected",
			"shortContent": "The HTML specification does not require browsers to preserve the values of boolean attributes such as selected. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code><span class='pln'>ngSelected</span></code> directive solves this problem for the <code><span class='pln'>selected</span></code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.",			
			"keyword": "",
			"link": "#angularAPI/directive/ngSelected"
		},
		{ 
			"title": "ngOpen",
			"shortContent": "The HTML specification does not require browsers to preserve the values of boolean attributes such as open. (Their presence means true and their absence means false.) If we put an Angular interpolation expression into such an attribute then the binding information would be lost when the browser removes the attribute. The <code><span class='pln'>ngOpen</span></code> directive solves this problem for the <code><span class='pln'>open</span></code> attribute. This complementary directive is not removed by the browser and so provides a permanent reliable place to store the binding information.",
			"keyword": "",
			"link": "#angularAPI/directive/ngOpen"
		},
		{ 
			"title": "ngForm",
			"shortContent": "Nestable alias of <a href='api/ng/directive/form'><code><span class='pln'>form</span></code></a> directive. HTML does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a sub-group of controls needs to be determined.",
			"keyword": "",
			"link": "#angularAPI/directive/ngForm"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "form",
			"shortContent": "Directive that instantiates FormController.",
			"keyword": "",
			"link": "#angularAPI/directive/form"
		},
		{ 
			"title": "textarea",
			"shortContent": "HTML textarea element control with angular data-binding. The data-binding and validation properties of this element are exactly the same as those of the input element.",
			"keyword": "",
			"link": "#angularAPI/directive/textarea"
		},
		{ 
			"title": "input",
			"shortContent": "HTML input element control. When used together with <a href='api/ng/directive/ngModel'><code><span class='pln'>ngModel</span></code></a>, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.",
			"keyword": "",
			"link": "#angularAPI/directive/input"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngValue",
			"shortContent": "Binds the given expression to the value of <code><span class='tag'>&lt;option&gt;</span></code> or <a href='api/ng/input/input[radio]'><code><span class='pln'>input</span><span class='pun'>[</span><span class='pln'>radio</span><span class='pun'>]</span></code></a>, so that when the element is selected, the <a href='api/ng/directive/ngModel'><code><span class='pln'>ngModel</span></code></a> of that element is set to the bound value.",
			"keyword": "",
			"link": "#angularAPI/directive/ngValue"
		},
		{ 
			"title": "ngBind",
			"shortContent": "The <code><span class='pln'>ngBind</span></code> attribute tells Angular to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.",
			"keyword": "",
			"link": "#angularAPI/directive/ngBind"
		},
		{ 
			"title": "ngBindTemplate",
			"shortContent": "The <code><span class='pln'>ngBindTemplate</span></code> directive specifies that the element text content should be replaced with the interpolation of the template in the <code><span class='pln'>ngBindTemplate</span></code> attribute. Unlike <code><span class='pln'>ngBind</span></code>, the <code><span class='pln'>ngBindTemplate</span></code> can contain multiple <code><span class='pun'>{{</span></code> <code><span class='pun'>}}</span></code> expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.",
			"keyword": "",
			"link": "#angularAPI/directive/ngBindTemplate"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngBindHtml",
			"shortContent": "Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the <a href='api/ngSanitize/service/$sanitize'>$sanitize</a> service. To utilize this functionality, ensure that <code><span class='pln'>$sanitize</span></code> is available, for example, by including <a href='api/ngSanitize'><code><span class='pln'>ngSanitize</span></code></a> in your module's dependencies (not in core Angular). In order to use <a href='api/ngSanitize'><code><span class='pln'>ngSanitize</span></code></a> in your module's dependencies, you need to include 'angular-sanitize.js' in your application.",
			"keyword": "",
			"link": "#angularAPI/directive/ngBindHtml"
		},
		{ 
			"title": "ngChange",
			"shortContent": "Evaluate the given expression when the user changes the input. The expression is evaluated immediately, unlike the JavaScript onchange event which only triggers at the end of a change (usually, when the user leaves the form element or presses the return key).",
			"keyword": "",
			"link": "#angularAPI/directive/ngChange"
		},
		{ 
			"title": "ngClass",
			"shortContent": "The <code><span class='pln'>ngClass</span></code> directive allows you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added.",
			"keyword": "",
			"link": "#angularAPI/directive/ngClass"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngClassOdd",
			"shortContent": "The <code><span class='pln'>ngClassOdd</span></code> and <code><span class='pln'>ngClassEven</span></code> directives work exactly as <a href='api/ng/directive/ngClass'>ngClass</a>, except they work in conjunction with <code><span class='pln'>ngRepeat</span></code> and take effect only on odd (even) rows.",
			"keyword": "",
			"link": "#angularAPI/directive/ngClassOdd"
		},
		{ 
			"title": "ngClassEven",
			"shortContent": "The <code><span class='pln'>ngClassOdd</span></code> and <code><span class='pln'>ngClassEven</span></code> directives work exactly as <a href='api/ng/directive/ngClass'>ngClass</a>, except they work in conjunction with <code><span class='pln'>ngRepeat</span></code> and take effect only on odd (even) rows.",
			"keyword": "",
			"link": "#angularAPI/directive/ngClassEven"
		},
		{ 
			"title": "ngCloak",
			"shortContent": "The <code><span class='pln'>ngCloak</span></code> directive is used to prevent the Angular html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.",
			"keyword": "",
			"link": "#angularAPI/directive/ngCloak"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngController",
			"shortContent": "The <code><span class='pln'>ngController</span></code> directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.",
			"keyword": "",
			"link": "#angularAPI/directive/ngController"
		},
		{ 
			"title": "ngCsp",
			"shortContent": "Angular has some features that can break certain CSP (Content Security Policy) rules.",
			"keyword": "",
			"link": "#angularAPI/directive/ngCsp"
		},
		{ 
			"title": "ngClick",
			"shortContent": "The ngClick directive allows you to specify custom behavior when an element is clicked.",
			"keyword": "",
			"link": "#angularAPI/directive/ngClick"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngDblclick",
			"shortContent": "The <code><span class='pln'>ngDblclick</span></code> directive allows you to specify custom behavior on a dblclick event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngDblclick"
		},
		{ 
			"title": "ngMousedown",
			"shortContent": "The ngMousedown directive allows you to specify custom behavior on mousedown event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngMousedown"
		},
		{ 
			"title": "ngMouseup",
			"shortContent": "Specify custom behavior on mouseup event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngMouseup"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngMouseover",
			"shortContent": "Specify custom behavior on mouseover event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngMouseover"
		},
		{ 
			"title": "ngMouseenter",
			"shortContent": "Specify custom behavior on mouseenter event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngMouseenter"
		},
		{ 
			"title": "ngMouseleave",
			"shortContent": "Specify custom behavior on mouseleave event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngMouseleave"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngMousemove",
			"shortContent": "Specify custom behavior on mousemove event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngMousemove"
		},
		{ 
			"title": "ngKeydown",
			"shortContent": "Specify custom behavior on keydown event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngKeydown"
		},
		{ 
			"title": "ngKeyup",
			"shortContent": "Specify custom behavior on keyup event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngKeyup"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngKeypress",
			"shortContent": "Specify custom behavior on keypress event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngKeypress"
		},
		{ 
			"title": "ngSubmit",
			"shortContent": "Enables binding angular expressions to onsubmit events.",
			"keyword": "",
			"link": "#angularAPI/directive/ngSubmit"
		},
		{ 
			"title": "ngFocus",
			"shortContent": "Specify custom behavior on focus event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngFocus"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngBlur",
			"shortContent": "Specify custom behavior on blur event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngBlur"
		},
		{ 
			"title": "ngCopy",
			"shortContent": "Specify custom behavior on copy event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngCopy"
		},
		{ 
			"title": "ngCut",
			"shortContent": "Specify custom behavior on cut event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngCut"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngPaste",
			"shortContent": "Specify custom behavior on paste event.",
			"keyword": "",
			"link": "#angularAPI/directive/ngPaste"
		},
		{ 
			"title": "ngIf",
			"shortContent": "The <code><span class='pln'>ngIf</span></code> directive removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to <code><span class='pln'>ngIf</span></code> evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.",
			"keyword": "",
			"link": "#angularAPI/directive/ngIf"
		},
		{ 
			"title": "ngInclude",
			"shortContent": "Fetches, compiles and includes an external HTML fragment.",
			"keyword": "",
			"link": "#angularAPI/directive/ngInclude"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngInit",
			"shortContent": "The <code><span class='pln'>ngInit</span></code> directive allows you to evaluate an expression in the current scope.",
			"keyword": "",
			"link": "#angularAPI/directive/ngInit"
		},
		{ 
			"title": "ngList",
			"shortContent": "Text input that converts between a delimited string and an array of strings. The default delimiter is a comma followed by a space - equivalent to <code><span class='pln'>ng</span><span class='pun'>-</span><span class='pln'>list</span><span class='pun'>=</span><span class='str'>', '</span></code>. You can specify a custom delimiter as the value of the <code><span class='pln'>ngList</span></code> attribute - for example, <code><span class='pln'>ng</span><span class='pun'>-</span><span class='pln'>list</span><span class='pun'>=</span><span class='str'>' | '</span></code>.",
			"keyword": "",
			"link": "#angularAPI/directive/ngList"
		},
		{ 
			"title": "ngModel",
			"shortContent": "The <code><span class='pln'>ngModel</span></code> directive binds an <code><span class='pln'>input</span></code>,<code><span class='kwd'>select</span></code>, <code><span class='pln'>textarea</span></code> (or custom form control) to a property on the scope using <a href='api/ng/type/ngModel.NgModelController'>NgModelController</a>, which is created and exposed by this directive.",
			"keyword": "",
			"link": "#angularAPI/directive/ngModel"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngModelOptions",
			"shortContent": "Allows tuning how model updates are done. Using <code><span class='pln'>ngModelOptions</span></code> you can specify a custom list of events that will trigger a model update and/or a debouncing delay so that the actual update only takes place when a timer expires; this timer will be reset after another change takes place.",
			"keyword": "",
			"link": "#angularAPI/directive/ngModelOptions"
		},
		{ 
			"title": "ngNonBindable",
			"shortContent": "The <code><span class='pln'>ngNonBindable</span></code> directive tells Angular not to compile or bind the contents of the current DOM element. This is useful if the element contains what appears to be Angular directives and bindings but which should be ignored by Angular. This could be the case if you have a site that displays snippets of code, for instance.",
			"keyword": "",
			"link": "#angularAPI/directive/ngNonBindable"
		},
		{ 
			"title": "ngOptions",
			"shortContent": "The <code><span class='pln'>ngOptions</span></code> attribute can be used to dynamically generate a list of <code><span class='tag'>&lt;option&gt;</span></code> elements for the <code><span class='tag'>&lt;select&gt;</span></code> element using the array or object obtained by evaluating the <code><span class='pln'>ngOptions</span></code> comprehension expression.",
			"keyword": "",
			"link": "#angularAPI/directive/ngOptions"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngPluralize",
			"shortContent": "<code><span class='pln'>ngPluralize</span></code> is a directive that displays messages according to en-US localization rules. These rules are bundled with angular.js, but can be overridden (see <a href='guide/i18n'>Angular i18n</a> dev guide). You configure ngPluralize directive by specifying the mappings between <a href='http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html'>plural categories</a> and the strings to be displayed.",
			"keyword": "",
			"link": "#angularAPI/directive/ngPluralize"
		},
		{ 
			"title": "ngRepeat",
			"shortContent": "The <code><span class='pln'>ngRepeat</span></code> directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and <code><span class='pln'>$index</span></code> is set to the item index or key.",
			"keyword": "",
			"link": "#angularAPI/directive/ngRepeat"
		},
		{ 
			"title": "ngShow",
			"shortContent": "The <code><span class='pln'>ngShow</span></code> directive shows or hides the given HTML element based on the expression provided to the <code><span class='pln'>ngShow</span></code> attribute. The element is shown or hidden by removing or adding the <code><span class='pun'>.</span><span class='pln'>ng</span><span class='pun'>-</span><span class='pln'>hide</span></code> CSS class onto the element. The <code><span class='pun'>.</span><span class='pln'>ng</span><span class='pun'>-</span><span class='pln'>hide</span></code> CSS class is predefined in AngularJS and sets the display style to none (using an !important flag). For CSP mode please add <code><span class='pln'>angular</span><span class='pun'>-</span><span class='pln'>csp</span><span class='pun'>.</span><span class='pln'>css</span></code> to your html file (see ngCsp).",
			"keyword": "",
			"link": "#angularAPI/directive/ngShow"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngHide",
			"shortContent": "The <code><span class='pln'>ngHide</span></code> directive shows or hides the given HTML element based on the expression provided to the <code><span class='pln'>ngHide</span></code> attribute. The element is shown or hidden by removing or adding the <code><span class='pln'>ng</span><span class='pun'>-</span><span class='pln'>hide</span></code> CSS class onto the element. The <code><span class='pun'>.</span><span class='pln'>ng</span><span class='pun'>-</span><span class='pln'>hide</span></code> CSS class is predefined in AngularJS and sets the display style to none (using an !important flag). For CSP mode please add <code><span class='pln'>angular</span><span class='pun'>-</span><span class='pln'>csp</span><span class='pun'>.</span><span class='pln'>css</span></code> to your html file (see ngCsp).",
			"keyword": "",
			"link": "#angularAPI/directive/ngHide"
		},
		{ 
			"title": "ngStyle",
			"shortContent": "The <code><span class='pln'>ngStyle</span></code> directive allows you to set CSS style on an HTML element conditionally.",
			"keyword": "",
			"link": "#angularAPI/directive/ngStyle"
		},
		{ 
			"title": "ngSwitch",
			"shortContent": "The <code><span class='pln'>ngSwitch</span></code> directive is used to conditionally swap DOM structure on your template based on a scope expression. Elements within <code><span class='pln'>ngSwitch</span></code> but without <code><span class='pln'>ngSwitchWhen</span></code> or <code><span class='pln'>ngSwitchDefault</span></code> directives will be preserved at the location as specified in the template.",
			"keyword": "",
			"link": "#angularAPI/directive/ngSwitch"
		},
		{ 	"type": "clearfix"	},

		{ 
			"title": "ngTransclude",
			"shortContent": "Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.",
			"keyword": "",
			"link": "#angularAPI/directive/ngTransclude"
		},
		{ 
			"title": "script",
			"shortContent": "Load the content of a <code><span class='tag'>&lt;script&gt;</span></code> element into <a href='api/ng/service/$templateCache'><code><span class='pln'>$templateCache</span></code></a>, so that the template can be used by <a href='api/ng/directive/ngInclude'><code><span class='pln'>ngInclude</span></code></a>, <a href='api/ngRoute/directive/ngView'><code><span class='pln'>ngView</span></code></a>, or <a href='guide/directive'>directives</a>. The type of the <code><span class='tag'>&lt;script&gt;</span></code> element must be specified as <code><span class='pln'>text</span><span class='pun'>/</span><span class='pln'>ng</span><span class='pun'>-</span><span class='kwd'>template</span></code>, and a cache name for the template must be assigned through the element's <code><span class='pln'>id</span></code>, which can then be used as a directive's <code><span class='pln'>templateUrl</span></code>.",
			"keyword": "",
			"link": "#angularAPI/directive/script"
		},
		{ 
			"title": "select",
			"shortContent": "HTML <code><span class='pln'>SELECT</span></code> element with angular data-binding.",
			"keyword": "",
			"link": "#angularAPI/directive/select"
		},
		{ 	"type": "clearfix"	}



		
	]
}